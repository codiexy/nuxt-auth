import { addTypeTemplate, type Resolver } from '@nuxt/kit'
import { relative, resolve } from 'pathe'

export const registerTypeTemplates = (resolver: Resolver) => {
  addTypeTemplate({
    filename: 'types/codiexy-auth.d.ts',
    getContents: ({ nuxt }) => {
      const { buildDir } = nuxt.options
      const getRelativePath = (path: string) => relative(resolve(buildDir, './types'), resolver.resolve(path))
      return `// Generated by codiexy-nuxt-auth module
import type { CodiexyAppConfig } from '${getRelativePath('./runtime/types/config.ts')}';
import type { CodiexyGlobalMiddlewarePageMeta } from '${getRelativePath('./runtime/types/meta.ts')}';

declare module 'nuxt/schema' {
    interface AppConfig {
        codiexyAuth?: CodiexyAppConfig;
    }
    interface AppConfigInput {
        codiexyAuth?: CodiexyAppConfig;
    }
}

declare module '@nuxt/schema' {
    interface AppConfig {
        codiexyAuth?: CodiexyAppConfig;
    }
    interface AppConfigInput {
        codiexyAuth?: CodiexyAppConfig;
    }
}

declare module '#app' {
    interface PageMeta {
        /**
         * Codiexy Auth global middleware page configuration.
         */
        codiexyAuth?: Partial<CodiexyGlobalMiddlewarePageMeta>;
    }
}

declare module '#app/../pages/runtime/composables' {
    interface PageMeta {
        /**
         * Codiexy Auth global middleware page configuration.
         */
        codiexyAuth?: Partial<CodiexyGlobalMiddlewarePageMeta>;
    }
}

export {};`
    },
  })
}
